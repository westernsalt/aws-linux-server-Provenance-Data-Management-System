import json, fnmatch, wcmatch, os, re
from wcmatch import glob

# was attributed to
agent1 = []
entity1 = []
with open('wasAttributedTo.json', encoding='utf-8') as file:
   data = file.readlines()
   for d in data:
      d = json.loads(d)
      agent1.append(d['p']['nodes'][0])
      entity1.append(d['p']['nodes'][1])
      

# was generated by
entity2 = []
activity1 = []
with open('wasGeneratedBy.json', encoding='utf-8') as file:
   data = file.readlines()
   for d in data:
      d = json.loads(d)
      entity2.append(d['p']['nodes'][0])
      activity1.append(d['p']['nodes'][1])

# was associated with (activity agent)
activity2 = []
agent2 = []
with open('wasAssociatedWith.json', encoding='utf-8') as file:
   data = file.readlines()
   for d in data:
      d = json.loads(d)
      activity2.append(d['p']['nodes'][0])
      agent2.append(d['p']['nodes'][1])
      
#pair(index1, index2)
pairs1 = []
for index1, e1 in enumerate(entity1):
   for index2, e2 in enumerate(entity2):
     # print(e1['id'] == e2['id'])
      if e1['id'] == e2['id']:
         #print(index1, index2)
         #print(entity1[index1], entity2[index2])
         #if entity1[index1] == entity2[index2]:
         #   print(True)
         pairs1.append([agent1[index1], entity1[index1], activity1[index2]])
         #pairs1.append([index1, index2])

pairs2 = []
for index1, a1 in enumerate(activity1):
   for index2, a2 in enumerate(activity2):
      if a1['id'] == a2['id']:
         #print(index1, index2)
         #if activity1[index1] == activity2[index2]:
         #   print(True)
         pairs2.append([entity2[index1], activity1[index1], agent2[index2]])
         #pairs2.append([index1, index2])


result = []
joinResult = []
for p1 in pairs1:
   for p2 in pairs2:
      if p1[0]['id'] == p2[2]['id'] and p1[1]['id'] == p2[0]['id'] and p1[2]['id'] == p2[1]['id']: # agent compare
         result = [p1[0]['properties']['name'],p1[0]['properties']['affiliation'], #Agent
                   p1[2]['properties']['name'],p1[2]['properties']['date'],p1[1]['properties']['name'], #Entity
                   p1[1]['properties']['type'],p1[1]['properties']['price'],p1[1]['properties']['device']] #Activity
         
         delimiter='-'
         joinResult.append(delimiter.join(result))
         
joinResult = list(set(joinResult)) #리스트 중복제거


searchTerm = ['*Emily*']
re = glob.globfilter(joinResult, searchTerm)
print(re)

#search term '*Emily*2018' 이런 식으로 넣으면 검색 가능
#js에서 검색 시 * 붙일 수 있도록 구현
#python에서 함수 호출
#json으로 export하는 cypher : CALL apoc.export.json.query("query 적기","filename.json",{})